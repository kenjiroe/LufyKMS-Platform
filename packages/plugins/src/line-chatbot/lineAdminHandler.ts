/**
 * LINE Admin Handler
 * Handles admin commands for LINE bot
 */

import { KnowledgeManagementSystem } from '@lufykms/core';
import { Command, OutgoingMessage } from '../types';
import { LineApiClient } from './lineApiClient';

export class LineAdminHandler {
  private kms: KnowledgeManagementSystem;
  private apiClient: LineApiClient;
  private adminUsers: string[];

  constructor(
    kms: KnowledgeManagementSystem, 
    apiClient: LineApiClient, 
    adminUsers: string[] = []
  ) {
    this.kms = kms;
    this.apiClient = apiClient;
    this.adminUsers = adminUsers;
  }

  /**
   * Check if user is admin
   */
  isAdmin(userId: string): boolean {
    return this.adminUsers.includes(userId);
  }

  /**
   * Add admin user
   */
  addAdmin(userId: string): void {
    if (!this.adminUsers.includes(userId)) {
      this.adminUsers.push(userId);
    }
  }

  /**
   * Remove admin user
   */
  removeAdmin(userId: string): void {
    const index = this.adminUsers.indexOf(userId);
    if (index > -1) {
      this.adminUsers.splice(index, 1);
    }
  }

  /**
   * Handle admin command
   */
  async handleCommand(command: Command, replyToken?: string): Promise<OutgoingMessage[]> {
    if (!this.isAdmin(command.userId)) {
      return [{
        type: 'text',
        content: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ'
      }];
    }

    try {
      switch (command.name) {
        case 'status':
          return await this.handleStatusCommand();
        
        case 'docs':
          return await this.handleDocsCommand();
        
        case 'clear':
          return await this.handleClearCommand(command.args);
        
        case 'stats':
          return await this.handleStatsCommand();
        
        case 'help':
          return await this.handleHelpCommand();
        
        default:
          return [{
            type: 'text',
            content: `‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command.name}\n‡πÉ‡∏ä‡πâ /admin help ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ`
          }];
      }
    } catch (error) {
      console.error(`Error handling admin command ${command.name}:`, error);
      return [{
        type: 'text',
        content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${error.message}`
      }];
    }
  }

  /**
   * Handle status command
   */
  private async handleStatusCommand(): Promise<OutgoingMessage[]> {
    try {
      const health = await this.kms.getHealthStatus();
      const storageStats = await this.kms.getStorageStats();

      const message = [
        'üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö LufyKMS:',
        '',
        `üü¢ Storage: ${health.storage ? '‡∏õ‡∏Å‡∏ï‡∏¥' : '‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'}`,
        `üü¢ Embedding: ${health.embedding ? '‡∏õ‡∏Å‡∏ï‡∏¥' : '‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'}`,
        `üü¢ Search: ${health.search ? '‡∏õ‡∏Å‡∏ï‡∏¥' : '‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'}`,
        '',
        `üìö ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${health.totalDocuments} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
        `üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${Math.round((storageStats?.totalSize || 0) / 1024)} KB`,
        '',
        `‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date().toLocaleString('th-TH')}`
      ].join('\n');

      return [{ type: 'text', content: message }];
    } catch (error) {
      return [{
        type: 'text',
        content: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ: ${error.message}`
      }];
    }
  }

  /**
   * Handle docs command
   */
  private async handleDocsCommand(): Promise<OutgoingMessage[]> {
    try {
      const documents = await this.kms.getAllDocuments();

      if (documents.length === 0) {
        return [{
          type: 'text',
          content: 'üìö ‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤'
        }];
      }

      const message = [
        `üìö ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ (${documents.length} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£):`,
        ''
      ];

      documents.slice(0, 10).forEach((doc, index) => {
        const preview = doc.content.substring(0, 50);
        message.push(`${index + 1}. ${doc.metadata.fileName || doc.id.substring(0, 8)}`);
        message.push(`   ${preview}...`);
        message.push(`   ‡∏Ç‡∏ô‡∏≤‡∏î: ${doc.content.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`);
        message.push('');
      });

      if (documents.length > 10) {
        message.push(`... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${documents.length - 10} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£`);
      }

      return [{ type: 'text', content: message.join('\n') }];
    } catch (error) {
      return [{
        type: 'text',
        content: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ: ${error.message}`
      }];
    }
  }

  /**
   * Handle clear command
   */
  private async handleClearCommand(args: string[]): Promise<OutgoingMessage[]> {
    if (args.length === 0) {
      return [{
        type: 'text',
        content: [
          '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:',
          '/admin clear knowledge - ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ',
          '/admin clear all - ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
          '',
          '‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ'
        ].join('\n')
      }];
    }

    const target = args[0];

    try {
      switch (target) {
        case 'knowledge':
          const result = await this.kms.clearAllDocuments();
          return [{
            type: 'text',
            content: `‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${result.deletedCount} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£`
          }];

        case 'all':
          const clearResult = await this.kms.clearAllDocuments();
          return [{
            type: 'text',
            content: `‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${clearResult.deletedCount} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£`
          }];

        default:
          return [{
            type: 'text',
            content: `‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${target}\n‡πÉ‡∏ä‡πâ /admin clear ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`
          }];
      }
    } catch (error) {
      return [{
        type: 'text',
        content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${error.message}`
      }];
    }
  }

  /**
   * Handle stats command
   */
  private async handleStatsCommand(): Promise<OutgoingMessage[]> {
    try {
      const health = await this.kms.getHealthStatus();
      const storageStats = await this.kms.getStorageStats();

      const message = [
        'üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö LufyKMS:',
        '',
        `üìö ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${health.totalDocuments}`,
        `üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°: ${Math.round((storageStats?.totalSize || 0) / 1024)} KB`,
        ''
      ];

      if (storageStats?.bySource) {
        message.push('üìä ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤:');
        Object.entries(storageStats.bySource).forEach(([source, count]) => {
          message.push(`  ‚Ä¢ ${source}: ${count} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£`);
        });
        message.push('');
      }

      if (storageStats?.byMimeType) {
        message.push('üìã ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå:');
        Object.entries(storageStats.byMimeType).forEach(([type, count]) => {
          message.push(`  ‚Ä¢ ${type}: ${count} ‡πÑ‡∏ü‡∏•‡πå`);
        });
      }

      return [{ type: 'text', content: message.join('\n') }];
    } catch (error) {
      return [{
        type: 'text',
        content: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏î‡πâ: ${error.message}`
      }];
    }
  }

  /**
   * Handle help command
   */
  private async handleHelpCommand(): Promise<OutgoingMessage[]> {
    const helpMessage = [
      'üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö LufyKMS:',
      '',
      'üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö:',
      '/admin status - ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö',
      '/admin docs - ‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ',
      '/admin stats - ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      '',
      'üóëÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:',
      '/admin clear knowledge - ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ',
      '/admin clear all - ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      '',
      '/admin help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ',
      '',
      'üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
    ].join('\n');

    return [{ type: 'text', content: helpMessage }];
  }

  /**
   * Get admin list
   */
  getAdminUsers(): string[] {
    return [...this.adminUsers];
  }

  /**
   * Set admin users
   */
  setAdminUsers(users: string[]): void {
    this.adminUsers = [...users];
  }
}